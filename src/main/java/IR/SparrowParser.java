/* Generated By:JavaCC: Do not edit this line. SparrowParser.java */
package IR;

import IR.syntaxtree.*;


public class SparrowParser implements SparrowParserConstants {

  static final public Program Program() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   FunctionDeclaration n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = FunctionDeclaration();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Program(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDeclaration FunctionDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   FunctionName n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   Identifier n6;
   NodeToken n7;
   Token n8;
   Block n9;
    n1 = jj_consume_token(FUNC);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FunctionName();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      n6 = Identifier();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Block();
     {if (true) return new FunctionDeclaration(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Instruction n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
    label_3:
    while (true) {
      if (jj_2_1(5)) {
        ;
      } else {
        break label_3;
      }
      n1 = Instruction();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(RETURN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Instruction Instruction() throws ParseException {
   NodeChoice n0;
   LabelWithColon n1;
   SetInteger n2;
   SetFuncName n3;
   Add n4;
   Subtract n5;
   Multiply n6;
   LessThan n7;
   Load n8;
   Store n9;
   Move n10;
   Alloc n11;
   Print n12;
   ErrorMessage n13;
   Goto n14;
   IfGoto n15;
   Call n16;
    if (jj_2_2(4)) {
      n1 = LabelWithColon();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_3(4)) {
      n2 = SetInteger();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_4(4)) {
      n3 = SetFuncName();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_5(4)) {
      n4 = Add();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_6(4)) {
      n5 = Subtract();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_7(4)) {
      n6 = Multiply();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_8(4)) {
      n7 = LessThan();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_9(4)) {
      n8 = Load();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_10(4)) {
      n9 = Store();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_11(4)) {
      n10 = Move();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_12(3)) {
      n11 = Alloc();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_13(3)) {
      n12 = Print();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_14(3)) {
      n13 = ErrorMessage();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_15(3)) {
      n14 = Goto();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_16(3)) {
      n15 = IfGoto();
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_17(3)) {
      n16 = Call();
        n0 = new NodeChoice(n16, 15);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Instruction(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LabelWithColon LabelWithColon() throws ParseException {
   Label n0;
   NodeToken n1;
   Token n2;
    n0 = Label();
    n2 = jj_consume_token(35);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new LabelWithColon(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public SetInteger SetInteger() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = IntegerLiteral();
     {if (true) return new SetInteger(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SetFuncName SetFuncName() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FunctionName n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ADDRESS);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = FunctionName();
     {if (true) return new SetFuncName(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Add Add() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(PLUS);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
     {if (true) return new Add(n0,n1,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Subtract Subtract() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(MINUS);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
     {if (true) return new Subtract(n0,n1,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Multiply Multiply() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(36);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
     {if (true) return new Multiply(n0,n1,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThan LessThan() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LT);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
     {if (true) return new LessThan(n0,n1,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Load Load() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   IntegerLiteral n8;
   NodeToken n9;
   Token n10;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(PLUS);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = IntegerLiteral();
    n10 = jj_consume_token(RSQPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new Load(n0,n1,n3,n5,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Store Store() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   IntegerLiteral n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(PLUS);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = IntegerLiteral();
    n7 = jj_consume_token(RSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(ASSIGN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Identifier();
     {if (true) return new Store(n0,n2,n3,n5,n6,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public Move Move() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new Move(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Alloc Alloc() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ALLOC);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Alloc(n0,n1,n3,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Print Print() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(PRINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Print(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ErrorMessage ErrorMessage() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   StringLiteral n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(ERROR);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = StringLiteral();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ErrorMessage(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Goto Goto() throws ParseException {
   NodeToken n0;
   Token n1;
   Label n2;
    n1 = jj_consume_token(GOTO);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Label();
     {if (true) return new Goto(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public IfGoto IfGoto() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Label n5;
    n1 = jj_consume_token(IFZERO);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(GOTO);
               n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Label();
     {if (true) return new IfGoto(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Call Call() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   Identifier n9;
   NodeToken n10;
   Token n11;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(CALL);
               n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_4;
      }
      n9 = Identifier();
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Call(n0,n1,n3,n5,n6,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionName FunctionName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FunctionName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Label Label() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Label(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRINGCONSTANT);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IFZERO)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(GOTO)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(36)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ERROR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(ADDRESS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(ALLOC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(STRINGCONSTANT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SparrowParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current cs132.IR.token. */
  static public Token token;
  /** Next cs132.IR.token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[17];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SparrowParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SparrowParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SparrowParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SparrowParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SparrowParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SparrowParser(SparrowParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SparrowParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next cs132.IR.token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific cs132.IR.token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
